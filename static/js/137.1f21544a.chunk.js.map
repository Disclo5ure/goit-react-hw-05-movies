{"version":3,"file":"static/js/137.1f21544a.chunk.js","mappings":"8PACA,GAAgB,SAAW,+BAA+B,OAAS,6BAA6B,OAAS,6BAA6B,MAAQ,4BAA4B,eAAiB,sC,kBCuE3L,EAlEqB,WAAO,IAAD,QACjBA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA0BE,EAAAA,EAAAA,UAAS,CAAEC,OAAQ,GAAIC,aAAc,KAA/D,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAajB,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGACOC,EAAAA,EAAAA,IAAA,6CACiBX,EADjB,8CADP,OACVY,EADU,OAIhBC,QAAQC,IAAIF,GACZN,EAASM,EAASG,MALF,2CAAH,qDAOfL,GAED,GAAE,KAED,iCACE,SAAC,KAAD,CAAMM,GAAE,oBAAET,EAASU,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAKC,UAAWC,EAAAA,OAAlD,sBAGA,iBAAKD,UAAWC,EAAAA,SAAhB,WACE,gBACEC,IAAG,yCAAoChB,EAAMiB,aAC7CC,IAAI,GACJJ,UAAWC,EAAAA,UAEb,iBAAKD,UAAWC,EAAAA,YAAhB,WACE,0BACGf,EAAMmB,MADT,KACkBnB,EAAMD,aAAaqB,MAAM,KAAK,GADhD,QAGA,yCAAsC,GAArBpB,EAAMqB,cAAmBC,UAA1C,QACA,sCACA,uBAAItB,EAAMuB,YACV,oCACA,uBACGvB,EAAMF,OAAO0B,KAAI,SAAAC,GAAK,OACrB,iBAAqBX,UAAWC,EAAAA,MAAhC,SACGU,EAAMC,OADEC,EAAAA,EAAAA,MADU,aAQ7B,iBAAKb,UAAWC,EAAAA,eAAhB,WACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMJ,GAAG,OAAOC,MAAO,CAAEC,KAAI,UAAEX,EAASU,aAAX,aAAE,EAAgBC,MAA/C,qBAIF,yBACE,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAI,UAAEX,EAASU,aAAX,aAAE,EAAgBC,MAAlD,8BAMN,SAAC,EAAAe,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,QAIP,C,uDCrEM,IAkBIF,EAAS,eAACG,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACvC,EAAIwC,GAWvD,OARExC,IAFFwC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/movieDetails/MovieDetails.module.css?553c","components/movieDetails/MovieDetails.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainInfo\":\"MovieDetails_mainInfo__pjFU9\",\"goBack\":\"MovieDetails_goBack__GNtQz\",\"poster\":\"MovieDetails_poster__3zlUJ\",\"genre\":\"MovieDetails_genre__+8ZCC\",\"additionalInfo\":\"MovieDetails_additionalInfo__+U8SN\"};","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { Suspense, useEffect, useState } from 'react';\nimport css from './MovieDetails.module.css';\nimport { nanoid } from 'nanoid';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [movie, setMovie] = useState({ genres: [], release_date: '' });\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n      );\n      console.log(response);\n      setMovie(response.data);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <>\n      <Link to={location.state?.from ?? '/'} className={css.goBack}>\n        Go back\n      </Link>\n      <div className={css.mainInfo}>\n        <img\n          src={`https://image.tmdb.org/t/p/w342${movie.poster_path}`}\n          alt=\"\"\n          className={css.poster}\n        />\n        <div className={css.mainDetails}>\n          <h2>\n            {movie.title} ({movie.release_date.split('-')[0]})\n          </h2>\n          <p>User score: {(movie.vote_average * 10).toFixed()}%</p>\n          <h3>Overview</h3>\n          <p>{movie.overview}</p>\n          <h4>Genres</h4>\n          <p>\n            {movie.genres.map(genre => (\n              <span key={nanoid()} className={css.genre}>\n                {genre.name}\n              </span>\n            ))}\n          </p>\n        </div>\n      </div>\n      <div className={css.additionalInfo}>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <Link to=\"cast\" state={{ from: location.state?.from }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: location.state?.from }}>\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","genres","release_date","movie","setMovie","location","useLocation","useEffect","fetchData","axios","response","console","log","data","to","state","from","className","css","src","poster_path","alt","title","split","vote_average","toFixed","overview","map","genre","name","nanoid","Suspense","fallback","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}