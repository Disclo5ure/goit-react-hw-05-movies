{"version":3,"file":"static/js/183.7d77de9b.chunk.js","mappings":"2NACA,GAAiB,E,6CCoCjB,EA/Ba,WACX,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,qGACGC,EAAAA,EAAAA,GAAUP,GADb,OACVG,EADU,OAEhBC,EAAQD,GAFQ,2CAAH,qDAIfG,GAED,GAAE,KAGD,wBACGH,EAAKK,KAAI,SAAAC,GAAK,OACb,gBAAmBC,UAAWC,EAAAA,MAA9B,UACGF,EAAMG,eACL,gBACEC,IAAG,yCAAoCJ,EAAMG,cAC7CE,IAAI,MAGR,uBAAIL,EAAMM,iBACV,uBAAIN,EAAMO,eARHC,EAAAA,EAAAA,MADI,KAcpB,C,8LCjCKC,EAAU,mCAEHC,EAAW,mCAAG,WAAMC,GAAN,uFACFC,EAAAA,EAAAA,IAAA,0DAC8BD,EAD9B,oBAC+CF,IAF7C,cACnBI,EADmB,yBAIlBA,EAASC,KAAKC,SAJI,2CAAH,sDAOXC,EAAa,mCAAG,oGACJJ,EAAAA,EAAAA,IAAA,kEACsCH,IAFlC,cACrBI,EADqB,yBAIpBA,EAASC,KAAKC,SAJM,2CAAH,qDAObE,EAAiB,mCAAG,WAAM1B,GAAN,uFACRqB,EAAAA,EAAAA,IAAA,6CACiBrB,EADjB,oBAC+BkB,IAFvB,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBhB,EAAS,mCAAG,WAAMP,GAAN,uFACAqB,EAAAA,EAAAA,IAAA,6CACiBrB,EADjB,sDADA,cACjBsB,EADiB,yBAIhBA,EAASC,KAAKpB,MAJE,2CAAH,sDAOTwB,EAAY,mCAAG,WAAM3B,GAAN,uFACHqB,EAAAA,EAAAA,IAAA,6CACiBrB,EADjB,sDADG,cACpBsB,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,qD,uDC/BlB,IAkBIP,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAChC,EAAIiC,GAWvD,OAREjC,IAFFiC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/cast/Cast.module.css","components/cast/Cast.jsx","fetchData/fetchData.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import css from './Cast.module.css';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'fetchData/fetchData';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const cast = await fetchCast(id);\n      setCast(cast);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ul>\n      {cast.map(actor => (\n        <li key={nanoid()} className={css.actor}>\n          {actor.profile_path && (\n            <img\n              src={`https://image.tmdb.org/t/p/w342${actor.profile_path}`}\n              alt=\"\"\n            />\n          )}\n          <p>{actor.original_name}</p>\n          <p>{actor.character}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'a6f1a167469b842b62ef942bf0dd3d8a';\n\nexport const fetchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n  );\n  return response.data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","cast","setCast","useEffect","fetchData","fetchCast","map","actor","className","css","profile_path","src","alt","original_name","character","nanoid","API_KEY","fetchMovies","query","axios","response","data","results","fetchTrending","fetchMovieDetails","fetchReviews","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}