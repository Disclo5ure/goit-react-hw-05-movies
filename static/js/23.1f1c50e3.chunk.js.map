{"version":3,"file":"static/js/23.1f1c50e3.chunk.js","mappings":"gOAkCA,UA7BgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,oGACOC,EAAAA,EAAAA,IAAA,6CACiBP,EADjB,sDADP,OACVQ,EADU,OAIhBJ,EAAWI,EAASC,KAAKC,SAJT,2CAAH,qDAMfJ,GAED,GAAE,KAGD,0BACGH,EAAQQ,OAAS,GAChBR,EAAQS,KAAI,SAAAC,GAAM,OAChB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,aAFJC,EAAAA,EAAAA,MADO,IAMA,IAAnBb,EAAQQ,SAAgB,uEAG9B,C,uDC/BM,IAkBIK,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACrB,EAAIsB,GAWvD,OAREtB,IAFFsB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/reviews/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get(\n        `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n      );\n      setReviews(response.data.results);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ul>\n      {reviews.length > 0 &&\n        reviews.map(review => (\n          <li key={nanoid()}>\n            <h4>Author: {review.author}</h4>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      {reviews.length === 0 && <p>We don't have any reviews for this movie.</p>}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","fetchData","axios","response","data","results","length","map","review","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}