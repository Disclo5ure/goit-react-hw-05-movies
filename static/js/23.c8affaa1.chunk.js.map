{"version":3,"file":"static/js/23.c8affaa1.chunk.js","mappings":"gOAgCA,UA3BgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,qGACOC,EAAAA,EAAAA,IAAaP,GADpB,OACVQ,EADU,OAEhBJ,EAAWI,GAFK,2CAAH,qDAIfF,GAED,GAAE,KAGD,0BACGH,EAAQM,OAAS,GAChBN,EAAQO,KAAI,SAAAC,GAAM,OAChB,2BACE,qCAAaA,EAAOC,WACpB,uBAAID,EAAOE,aAFJC,EAAAA,EAAAA,MADO,IAMA,IAAnBX,EAAQM,SAAgB,uEAG9B,C,8LC5BKM,EAAU,mCAEHC,EAAW,mCAAG,WAAMC,GAAN,uFACFC,EAAAA,EAAAA,IAAA,0DAC8BD,EAD9B,oBAC+CF,IAF7C,cACnBP,EADmB,yBAIlBA,EAASW,KAAKC,SAJI,2CAAH,sDAOXC,EAAa,mCAAG,oGACJH,EAAAA,EAAAA,IAAA,kEACsCH,IAFlC,cACrBP,EADqB,yBAIpBA,EAASW,KAAKC,SAJM,2CAAH,qDAObE,EAAiB,mCAAG,WAAMtB,GAAN,uFACRkB,EAAAA,EAAAA,IAAA,6CACiBlB,EADjB,oBAC+Be,IAFvB,cACzBP,EADyB,yBAIxBA,EAASW,MAJe,2CAAH,sDAOjBI,EAAS,mCAAG,WAAMvB,GAAN,uFACAkB,EAAAA,EAAAA,IAAA,6CACiBlB,EADjB,sDADA,cACjBQ,EADiB,yBAIhBA,EAASW,KAAKK,MAJE,2CAAH,sDAOTjB,EAAY,mCAAG,WAAMP,GAAN,uFACHkB,EAAAA,EAAAA,IAAA,6CACiBlB,EADjB,sDADG,cACpBQ,EADoB,yBAInBA,EAASW,KAAKC,SAJK,2CAAH,qD,uDC/BlB,IAkBIN,EAAS,eAACW,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC7B,EAAI8B,GAWvD,OARE9B,IAFF8B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/reviews/Reviews.jsx","fetchData/fetchData.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'fetchData/fetchData';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetchReviews(id);\n      setReviews(response);\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ul>\n      {reviews.length > 0 &&\n        reviews.map(review => (\n          <li key={nanoid()}>\n            <h4>Author: {review.author}</h4>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      {reviews.length === 0 && <p>We don't have any reviews for this movie.</p>}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'a6f1a167469b842b62ef942bf0dd3d8a';\n\nexport const fetchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n  );\n  return response.data.results;\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","fetchData","fetchReviews","response","length","map","review","author","content","nanoid","API_KEY","fetchMovies","query","axios","data","results","fetchTrending","fetchMovieDetails","fetchCast","cast","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}