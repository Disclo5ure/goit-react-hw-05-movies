{"version":3,"file":"static/js/577.d17fb79a.chunk.js","mappings":"+PAEMA,EAAU,mCAEHC,EAAW,mCAAG,WAAMC,GAAN,uFACFC,EAAAA,EAAAA,IAAA,0DAC8BD,EAD9B,oBAC+CF,IAF7C,cACnBI,EADmB,yBAIlBA,EAASC,KAAKC,SAJI,2CAAH,sDAOXC,EAAa,mCAAG,oGACJJ,EAAAA,EAAAA,IAAA,kEACsCH,IAFlC,cACrBI,EADqB,yBAIpBA,EAASC,KAAKC,SAJM,2CAAH,qDAObE,EAAiB,mCAAG,WAAMC,GAAN,uFACRN,EAAAA,EAAAA,IAAA,6CACiBM,EADjB,oBAC+BT,IAFvB,cACzBI,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,qD,2GCjB9B,GAAgB,UAAY,0BAA0B,MAAQ,sBAAsB,aAAe,8B,qDC+DnG,EA1De,WACb,OAAwCK,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcc,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAyBjB,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMlB,GAAN,wFACOD,EAAAA,EAAAA,IAAYC,GADnB,OACVE,EADU,OAEhBW,EAAcX,GAFE,2CAAH,sDAIXF,GACFU,EAAgB,CAAEV,MAAOA,IACzBkB,EAAUlB,IACDS,EAAaU,IAAI,SAC1BL,EAASL,EAAaU,IAAI,WAE1BT,EAAgB,CAAC,GACjBG,EAAc,IAGjB,GAAE,CAACb,KAGF,iCACE,kBAAMoB,UAAWC,EAAAA,KAAUC,SAzBV,SAAAC,GACnBA,EAAEC,iBACFV,EAASS,EAAEE,cAAczB,MAAM0B,OAC/BhB,EAAgB,CAAEV,MAAOuB,EAAEE,cAAczB,MAAM0B,OAChD,EAqBG,WACE,kBACEC,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTV,UAAWC,EAAAA,SAEb,mBAAQM,KAAK,SAASP,UAAWC,EAAAA,aAAjC,uBAIqB,IAAtBT,EAAWmB,SACV,wBACGnB,EAAWoB,KAAI,SAAAC,GAAK,OACnB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAM1B,IAAM4B,MAAO,CAAEC,KAAMrB,GAAhD,SACGkB,EAAMI,mBAFFC,EAAAA,EAAAA,MADU,QAW9B,C,uDC7DM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACpC,EAAIqC,GAWvD,OARErC,IAFFqC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["fetchData/fetchData.jsx","webpack://react-homework-template/./src/pages/movies/Movies.module.css?c186","pages/movies/Movies.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'a6f1a167469b842b62ef942bf0dd3d8a';\n\nexport const fetchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Movies_searchbar__51H03\",\"input\":\"Movies_input__+JkfI\",\"searchButton\":\"Movies_searchButton__cozX1\"};","import css from './Movies.module.css';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport { fetchMovies } from 'fetchData/fetchData';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [resultList, setResultList] = useState([]);\n  const [query, setQuery] = useState('');\n  const location = useLocation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setQuery(e.currentTarget.query.value);\n    setSearchParams({ query: e.currentTarget.query.value });\n  };\n\n  useEffect(() => {\n    const fetchData = async query => {\n      const response = await fetchMovies(query);\n      setResultList(response);\n    };\n    if (query) {\n      setSearchParams({ query: query });\n      fetchData(query);\n    } else if (searchParams.get('query')) {\n      setQuery(searchParams.get('query'));\n    } else {\n      setSearchParams({});\n      setResultList([]);\n    }\n    // eslint-disable-next-line\n  }, [query]);\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          className={css.input}\n        />\n        <button type=\"submit\" className={css.searchButton}>\n          Search\n        </button>\n      </form>\n      {resultList.length !== 0 && (\n        <ul>\n          {resultList.map(movie => (\n            <li key={nanoid()}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.original_title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_KEY","fetchMovies","query","axios","response","data","results","fetchTrending","fetchMovieDetails","id","useSearchParams","searchParams","setSearchParams","useState","resultList","setResultList","setQuery","location","useLocation","useEffect","fetchData","get","className","css","onSubmit","e","preventDefault","currentTarget","value","type","name","autoComplete","autoFocus","length","map","movie","to","state","from","original_title","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}