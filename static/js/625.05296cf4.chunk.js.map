{"version":3,"file":"static/js/625.05296cf4.chunk.js","mappings":"oOACA,GAAgB,UAAY,0BAA0B,MAAQ,sBAAsB,aAAe,8B,4CCgEnG,EA3De,WACb,OAAwCA,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,mCAAG,WAAMC,GAAN,gFACnBA,EAAEC,iBACIC,EAAQF,EAAEG,cAAcD,MAAME,MACpCX,EAAgB,CAAES,MAAOA,IAHN,SAIIG,EAAAA,EAAAA,IAAA,0DAC8BH,EAD9B,8CAJJ,OAIbI,EAJa,OAOnBV,EAAcU,EAASC,KAAKC,SAPT,2CAAH,sDAyBlB,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,wFACZlB,EAAamB,IAAI,SADL,gCAESN,EAAAA,EAAAA,IAAA,0DAC8Bb,EAAamB,IAC9D,SAFmB,8CAFT,OAERL,EAFQ,OAOdV,EAAcU,EAASC,KAAKC,SAPd,2CAAH,qDAUfE,GAED,GAAE,KAGD,iCACE,kBAAME,UAAWC,EAAAA,KAAUC,SAAUf,EAArC,WACE,kBACEgB,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTN,UAAWC,EAAAA,SAEb,mBAAQE,KAAK,SAASH,UAAWC,EAAAA,aAAjC,uBAIqB,IAAtBlB,EAAWwB,SACV,wBACGxB,EAAWyB,KAAI,SAAAC,GAAK,OACnB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAM5B,GAAhD,SACGwB,EAAMK,mBAFFC,EAAAA,EAAAA,MADU,QAW9B,C,uDC9DM,IAkBIA,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/movies/Movies.module.css?e70e","components/movies/Movies.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Movies_searchbar__t+Rzb\",\"input\":\"Movies_input__IEzMA\",\"searchButton\":\"Movies_searchButton__5yHS7\"};","import axios from 'axios';\nimport css from './Movies.module.css';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [resultList, setResultList] = useState([]);\n  const location = useLocation();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const query = e.currentTarget.query.value;\n    setSearchParams({ query: query });\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n    );\n    setResultList(response.data.results);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (searchParams.get('query')) {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/search/movie?query=${searchParams.get(\n            'query'\n          )}&api_key=a6f1a167469b842b62ef942bf0dd3d8a`\n        );\n        setResultList(response.data.results);\n      }\n    };\n    fetchData();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          className={css.input}\n        />\n        <button type=\"submit\" className={css.searchButton}>\n          Search\n        </button>\n      </form>\n      {resultList.length !== 0 && (\n        <ul>\n          {resultList.map(movie => (\n            <li key={nanoid()}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.original_title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useSearchParams","searchParams","setSearchParams","useState","resultList","setResultList","location","useLocation","handleSubmit","e","preventDefault","query","currentTarget","value","axios","response","data","results","useEffect","fetchData","get","className","css","onSubmit","type","name","autoComplete","autoFocus","length","map","movie","to","id","state","from","original_title","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}